py_recur version 2021-02-18 WIP
opts_test
opts_override_input_rule = py_recur_verify.txt
opts_override_input_task = todo_verify.txt
opts_override_done_text = done_verify.txt
opts_override_date = 2020-12-31
Processing day... 2020-12-30
schedstr = %s DAILY, dtstart=parse("20201230T000000")
py_recur.txt entry:  DAILY, dtstart=parse("20201230T000000") - this will match a entry in the todo_verify.txt and not be added
schedstr_fmt:  DTSTART:20201230T000000
RRULE:FREQ=DAILY;UNTIL=20201231T000000
rule_list: 
2020-12-30 00:00:00
2020-12-31 00:00:00
- Recur matches 2020-12-30: DAILY, dtstart=parse("20201230T000000") - this will match a entry in the todo_verify.txt and not be added
    - Duplicate task exists: this will match a entry in the todo_verify.txt and not be added
schedstr = %s DAILY, dtstart=parse("20201230T000000")
py_recur.txt entry:  DAILY, dtstart=parse("20201230T000000") - this does not have an entry in the todo_verify.txt and be added
schedstr_fmt:  DTSTART:20201230T000000
RRULE:FREQ=DAILY;UNTIL=20201231T000000
rule_list: 
2020-12-30 00:00:00
2020-12-31 00:00:00
- Recur matches 2020-12-30: DAILY, dtstart=parse("20201230T000000") - this does not have an entry in the todo_verify.txt and be added
    - No duplicate found for this does not have an entry in the todo_verify.txt and be added
    - Adding 2020-12-30 this does not have an entry in the todo_verify.txt and be added
schedstr = %s DAILY, interval=2, count=9
py_recur.txt entry:  DAILY, interval=2, count=9 - every other day for a total of 9
schedstr_fmt:  DTSTART:20180101T000000
RRULE:FREQ=DAILY;INTERVAL=2;COUNT=9
rule_list: 
2018-01-01 00:00:00
2018-01-03 00:00:00
2018-01-05 00:00:00
2018-01-07 00:00:00
2018-01-09 00:00:00
2018-01-11 00:00:00
2018-01-13 00:00:00
2018-01-15 00:00:00
2018-01-17 00:00:00
schedstr = %s WEEKLY, byweekday=(SU), count=8
py_recur.txt entry:  WEEKLY, byweekday=(SU), count=8 - weekly on Sunday for a total of 8
schedstr_fmt:  DTSTART:20180101T000000
RRULE:FREQ=WEEKLY;BYWEEKDAY=SU;COUNT=8
rule_list: 
2018-01-07 00:00:00
2018-01-14 00:00:00
2018-01-21 00:00:00
2018-01-28 00:00:00
2018-02-04 00:00:00
2018-02-11 00:00:00
2018-02-18 00:00:00
2018-02-25 00:00:00
schedstr = %s WEEKLY, byweekday=(MO), count=6
py_recur.txt entry:  WEEKLY, byweekday=(MO), count=6 - weekly on Monday for a total of 6
schedstr_fmt:  DTSTART:20180101T000000
RRULE:FREQ=WEEKLY;BYWEEKDAY=MO;COUNT=6
rule_list: 
2018-01-01 00:00:00
2018-01-08 00:00:00
2018-01-15 00:00:00
2018-01-22 00:00:00
2018-01-29 00:00:00
2018-02-05 00:00:00
schedstr = %s WEEKLY, byweekday=(WE), count=1
py_recur.txt entry:  WEEKLY, byweekday=(WE), count=1 - first Wednesday in range
schedstr_fmt:  DTSTART:20180101T000000
RRULE:FREQ=WEEKLY;BYWEEKDAY=WE;COUNT=1
rule_list: 
2018-01-03 00:00:00
schedstr = %s WEEKLY, byweekday=(TH), count=1
py_recur.txt entry:  WEEKLY, byweekday=(TH), count=1 - first Thursday in range
schedstr_fmt:  DTSTART:20180101T000000
RRULE:FREQ=WEEKLY;BYWEEKDAY=TH;COUNT=1
rule_list: 
2018-01-04 00:00:00
schedstr = %s WEEKLY, byweekday=(FR), count=1
py_recur.txt entry:  WEEKLY, byweekday=(FR), count=1 - first Friday in range
schedstr_fmt:  DTSTART:20180101T000000
RRULE:FREQ=WEEKLY;BYWEEKDAY=FR;COUNT=1
rule_list: 
2018-01-05 00:00:00
schedstr = %s WEEKLY, byweekday=(SA), count=1
py_recur.txt entry:  WEEKLY, byweekday=(SA), count=1 - first Saturday in range
schedstr_fmt:  DTSTART:20180101T000000
RRULE:FREQ=WEEKLY;BYWEEKDAY=SA;COUNT=1
rule_list: 
2018-01-06 00:00:00
schedstr = %s WEEKLY, byweekday=(SU,SA), count=4
py_recur.txt entry:  WEEKLY, byweekday=(SU,SA), count=4 - weekly on Sunday and Saturday for a total of 4
schedstr_fmt:  DTSTART:20180101T000000
RRULE:FREQ=WEEKLY;BYWEEKDAY=SU,SA;COUNT=4
rule_list: 
2018-01-06 00:00:00
2018-01-07 00:00:00
2018-01-13 00:00:00
2018-01-14 00:00:00
schedstr = %s WEEKLY, byweekday=(SU,MO,TU,WE,TH,FR,SA), bysetpos=6, count=5
py_recur.txt entry:  WEEKLY, byweekday=(SU,MO,TU,WE,TH,FR,SA), bysetpos=6, count=5 - weekly on Friday for a total of 5
schedstr_fmt:  DTSTART:20180101T000000
RRULE:FREQ=WEEKLY;BYWEEKDAY=SU,MO,TU,WE,TH,FR,SA;BYSETPOS=6;COUNT=5
rule_list: 
2018-01-06 00:00:00
2018-01-13 00:00:00
2018-01-20 00:00:00
2018-01-27 00:00:00
2018-02-03 00:00:00
schedstr = %s WEEKLY, wkst=SU, byweekday=(SU), count=3
py_recur.txt entry:  WEEKLY, wkst=SU, byweekday=(SU), count=3 - no idea what wkst does, but I'm passing it
schedstr_fmt:  DTSTART:20180101T000000
RRULE:FREQ=WEEKLY;WKST=SU;BYWEEKDAY=SU;COUNT=3
rule_list: 
2018-01-07 00:00:00
2018-01-14 00:00:00
2018-01-21 00:00:00
schedstr = %s WEEKLY, wkst=MO, byweekday=(SU), count=3
py_recur.txt entry:  WEEKLY, wkst=MO, byweekday=(SU), count=3 - no idea what wkst does, but I'm passing it
schedstr_fmt:  DTSTART:20180101T000000
RRULE:FREQ=WEEKLY;WKST=MO;BYWEEKDAY=SU;COUNT=3
rule_list: 
2018-01-07 00:00:00
2018-01-14 00:00:00
2018-01-21 00:00:00
schedstr = %s WEEKLY, byweekday=(WE), byweekno=(1)
py_recur.txt entry:  WEEKLY, byweekday=(WE), byweekno=(1) - Wednesday in the first week of every year
schedstr_fmt:  DTSTART:20180101T000000
RRULE:FREQ=WEEKLY;BYWEEKDAY=WE;BYWEEKNO=1;UNTIL=20201231T000000
rule_list: 
2018-01-03 00:00:00
2019-01-02 00:00:00
2020-01-01 00:00:00
schedstr = %s WEEKLY, byweekday=(TH), byweekno=(2,52)
py_recur.txt entry:  WEEKLY, byweekday=(TH), byweekno=(2,52) - Thursday in the second week and the 52nd week of every year
schedstr_fmt:  DTSTART:20180101T000000
RRULE:FREQ=WEEKLY;BYWEEKDAY=TH;BYWEEKNO=2,52;UNTIL=20201231T000000
rule_list: 
2018-01-11 00:00:00
2018-12-27 00:00:00
2019-01-10 00:00:00
2019-12-26 00:00:00
2020-01-09 00:00:00
2020-12-24 00:00:00
schedstr = %s MONTHLY, dtstart=parse("_elapsed_")
processing _elapsed_ taskstr %s Replace _elapsed_ with the completion date of the newest match. No matching done.txt entry and will be added

date latest %s 2018-01-01
%s [Replace _elapsed_ with the completion date of the newest match. No matching done.txt entry and will be added]
%s - Replace _elapsed_ with the completion date of the newest match. The done.txt entry is newer than the recurrence and will not be added
